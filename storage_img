require("dotenv").config();
const express = require("express");
const mongoose = require("mongoose");
const multer = require("multer");
const cors = require("cors");
const path = require("path");

const app = express();
app.use(express.json());
app.use(cors());
app.use("/uploads", express.static("uploads"));

// Connect to MongoDB
mongoose
  .connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log("MongoDB Connected"))
  .catch(err => console.log(err));

// Define Schema
const thriftItemSchema = new mongoose.Schema({
  title: String,
  description: String,
  price: Number,
  category: String,
  imageUrl: String,
});

const ThriftItem = mongoose.model("ThriftItem", thriftItemSchema);

// Set up Multer for Image Uploads
const storage = multer.diskStorage({
  destination: "uploads/",
  filename: (req, file, cb) => {
    cb(null, Date.now() + path.extname(file.originalname));
  },
});

const upload = multer({ storage });

// Route to Upload a Thrift Item
app.post("/upload", upload.single("image"), async (req, res) => {
  try {
    const { title, description, price, category } = req.body;
    const newItem = new ThriftItem({
      title,
      description,
      price,
      category,
      imageUrl: req.file ? `/uploads/${req.file.filename}` : "",
    });

    await newItem.save();
    res.status(201).json({ message: "Item uploaded successfully!", item: newItem });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Route to Get All Thrift Items
app.get("/items", async (req, res) => {
  try {
    const items = await ThriftItem.find();
    res.json(items);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Start Server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
